/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Skygod.Generators;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import de.articdive.jnoise.JNoise;
import net.minestom.server.instance.Chunk;
import net.minestom.server.instance.ChunkGenerator;
import net.minestom.server.instance.ChunkPopulator;
import net.minestom.server.instance.batch.ChunkBatch;
import net.minestom.server.instance.block.Block;
import net.minestom.server.world.biomes.Biome;

public class TutorialChunkGenerator implements ChunkGenerator {
	
	private int seed = 1200;
	
	private JNoise HeightNoiseOne = JNoise.newBuilder().openSimplex().setFrequency(0.01).setSeed(seed).build();
	private JNoise HeightNoiseTwo = JNoise.newBuilder().openSimplex().setFrequency(0.08).setSeed(seed * 2).build();
	
	private Random random = new Random();
	
	
	
    @Override
    public void generateChunkData(ChunkBatch batch, int chunkX, int chunkZ) {
    	// Set Seed
    	random.setSeed(seed + chunkX + chunkZ);
        // Set chunk blocks
        for (byte x = 0; x < Chunk.CHUNK_SIZE_X; x++)
            for (byte z = 0; z < Chunk.CHUNK_SIZE_Z; z++) {
            	int posX = (chunkX * 16) + x;
            	int posZ = (chunkZ * 16) + z;
                double Y = 64 + (HeightNoiseOne.getNoise(posX, posZ) * 42) + (HeightNoiseTwo.getNoise(posX, posZ) * 5);
                
                double delta = Math.sqrt(Math.pow(Math.abs((double) posX), 3) + Math.pow(Math.abs((double) posZ), 3));
                
                for (int i = 0; i < Y; i++) {
                	if (Math.abs(random.nextDouble()) < Math.pow((2048 / delta) / (0.1 * Y), 6)) {
                		batch.setBlock(x, i, z, Block.STONE);
                	}
                }
            }
    }

    @Override
    public void fillBiomes(Biome[] biomes, int chunkX, int chunkZ) {
    	Arrays.fill(biomes, Biome.PLAINS);
    }

    @Override
    public List<ChunkPopulator> getPopulators() {
        return null;
    }
}